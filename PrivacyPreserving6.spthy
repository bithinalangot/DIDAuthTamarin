theory PrivacyPreserving6
begin

builtins: hashing, signing, multiset

functions: prove/3, vrfy/3
equations: vrfy(prove(inp, w, sk), inp, pk(sk)) = true

functions: token/2, gamma/2, vrfyVRF/4
equations: vrfyVRF(x, token(x, sk), gamma(x, sk), pk(sk)) = true

functions: t1/1 [private]
functions: t2/1 [private]
equations: t1(token(a,b)) = a
equations: t2(token(a,b)) = b

functions: g1/1 [private]
functions: g2/1 [private]
equations: g1(gamma(a,b)) = a
equations: g2(gamma(a,b)) = b

/* Generates keypair */
rule Register_pk:
    [ Fr(~ltkA) ]
    -->
    [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)) ]

/* Derives keypair's identity */
rule Register_did:
    [ !Pk($A, pkA) ]
    -->
    [ !Did($A, h(pkA)) ]

/* Sets counter to 0 and computes <token, gamma> */
rule Register_tkn:
    [ !Ltk($A, ltkA) ]
    -->
    [ !Token($A, token('0', ltkA)), !Gamma($A, gamma('0', ltkA)) ]

/* Creates registration request to be sent to the blockchain */
rule Registration_request:
    let p = <pkA, ~info, token('0', ltkA)>
    in
    [ Fr(~info), !Token($A, token('0', ltkA)), !Ltk($A, ltkA), !Pk($A, pkA) ]
    --[ Send_RR($A) ]->
    [ Out(<p, sign(p, ltkA)>)]

/* Blockchain receives registration request, verifies the signature and returns identity and token inclusion proofs */
rule blockchain_receive:
    [ !Pk($A, pkA), In(<p, sig>), !Token($A, tkn), !Did($A, did) ]
    --[ Recv_RR($A),
    Eq(verify(sig, p, pkA), true),
    Unique(tkn) ]->
    [ !Did($A, did), !Betadid(did), !Betatkn(tkn) ]

/* Generates new token and computes integrity proof */
rule Generate_tkn:
    [ !Token($A, tkn), !Gamma($A, gam),
    !Betatkn(betatoken), Fr(~w), !Ltk($Z, ltkz) ]
    --[ Eq(g1(gam), t1(tkn)),
    Eq(g2(gam), t2(tkn)),
    Eq(betatoken, tkn) ]->
    [ !Token($A, token(t1(tkn)+'1', t2(tkn))), !Gamma($A, gamma(g1(gam)+'1', g2(gam))),
    Phi($A, prove(token(t1(tkn)+'1', t2(tkn)), ~w, ltkz)) ]

/* Generates ephemeral keypair */
rule Generate_pke:
    [ Fr(~ltkB), !Ltk($A, ltkA) ]
    -->
    [ Ltk2($A, ~ltkB), Pk2($A, sign(pk(~ltkB), ltkA)) ]

/* Creates authentication request to be sent to service */
rule Auth_req2:
    let
    tknreq = <<proof, tkn>, sign(<proof,tkn>, ltkB), pkB>
    in
    [ !Phi($A, proof), !Token($A, tkn),
    !Ltk2($A, ltkB), !Pk2($A, pkB), !Did($A, did),
    !Betadid(betadid), !Gamma($A, gam) ]
    --[ Send_to_service($A),
    Eq(t1(tkn), g1(gam)) ]->
    [ Authreq(did, betadid, t1(tkn), gam, tknreq) ]

/* Receives authentication request and sends token request to blockchain */
rule service_receive2:
    let 
    tknreq = <<proof, tkn>, sig, pkB>
    in
    [ Authreq(did, betadid, cnt, gamma, tknreq), !Pk($A, pkA) ]
    --[ Recv_AR($A),
    Eq(vrfyVRF(cnt, tkn, gamma, pkA), true),
    Eq(did, betadid) ]->
    [ Out(tknreq) ]

/* Receives token request from service and creates token inclusion proof */
rule blockchain_receive2:
    let
    tknreq = <<proof, tkn>, sig, pkB>
    in
    [ In(tknreq), !Pk($Z, pkz) ]
    --[ Recv_TR(),
    Eq(vrfy(proof, tkn, pkz), true), Unique(tkn) ]->
    [ !Betatkn(tkn) ]

/* Service starts session when token request validates */
rule return_to_service:
    [ !Token($A, tkn), !Betatkn(betatoken) ]
    --[ Eq(betatoken, tkn), Finish() ]->
    [ St_Session($A) ]

restriction Equality:
    "All x y #i. Eq(x,y) @i ==> x = y"

restriction uniqueness:
    "All x #i #j. Unique(x) @i & Unique(x) @j ==> #i = #j"

/* Checks whether there exists a trace from registration for authentication to start session  */
lemma executable:
    exists-trace
        "Ex #i. Finish() @i 
        & (All x y #i #j. (Send_RR(x)@i & Send_RR(y)@j) ==> x = y & #i = #j)
        & (All x y #i #j. (Recv_RR(x)@i & Recv_RR(y)@j) ==> x = y & #i = #j)
        & (All x y #i #j. (Send_to_service(x)@i & Send_to_service(y)@j) ==> x = y)
        & (All x y #i #j. (Recv_AR(x)@i & Recv_AR(y)@j) ==> x = y & #i = #j)
        & (All #i #j. (Recv_TR()@i & Recv_TR()@j) ==> #i = #j)
        "

end
